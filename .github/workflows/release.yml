name: release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  APP_NAME: 'opinionated-defaults'

permissions:
  id-token: write
  contents: read

jobs:
  release-cli:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash
        working-directory: ./bin

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: linux-x64-musl
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - name: linux-arm64-musl
            os: ubuntu-latest
            target: aarch64-unknown-linux-musl
          - name: win-x64-msvc
            os: windows-latest
            target: x86_64-pc-windows-msvc
          - name: win-arm64-msvc
            os: windows-latest
            target: aarch64-pc-windows-msvc
          - name: darwin-x64
            os: macos-latest
            target: x86_64-apple-darwin
          - name: darwin-arm64
            os: macos-latest
            target: aarch64-apple-darwin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup cross-compilation for Linux
        if: runner.os == 'Linux'
        run: cargo install cross --git https://github.com/cross-rs/cross --branch main

      - name: Build binary
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            cross build --target ${{ matrix.target }} --release
          else
            cargo build --target ${{ matrix.target }} --release
          fi

      - name: Prepare package for NPM
        id: prep
        run: |
          PKG_DIR="${{ matrix.name }}"
          mkdir -p "./${PKG_DIR}/bin"

          BIN_NAME=bin
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            BIN_NAME="${BIN_NAME}.exe"
          fi

          cp "target/${{ matrix.target }}/release/bin" "./${PKG_DIR}/bin/${BIN_NAME}"

          echo "pkg_dir=${PKG_DIR}" >> $GITHUB_OUTPUT
          echo "pkg_version=$(echo ${{ github.ref_name }} | sed 's/v//')" >> $GITHUB_OUTPUT

      - name: Prepare environment variables
        id: set_env_vars
        run: |
          NODE_OS=$(echo ${{ matrix.name }} | cut -d '-' -f1)
          NODE_ARCH=$(echo ${{ matrix.name }} | cut -d '-' -f2)
          echo "pkg_os=$NODE_OS" >> $GITHUB_OUTPUT
          echo "pkg_arch=$NODE_ARCH" >> $GITHUB_OUTPUT
          echo "pkg_name=@hiddenability/${{ env.APP_NAME }}-${NODE_OS}-${NODE_ARCH}" >> $GITHUB_OUTPUT

      - name: Create package.json
        run: |
          envsubst < package.json.tmpl > ${{ steps.prep.outputs.pkg_dir }}/package.json
          cp README.md ${{ steps.prep.outputs.pkg_dir }}
        env:
          NODE_VERSION: ${{ steps.prep.outputs.pkg_version }}
          NODE_OS: ${{ steps.set_env_vars.outputs.pkg_os }}
          NODE_ARCH: ${{ steps.set_env_vars.outputs.pkg_arch }}
          NODE_PKG_NAME: ${{ steps.set_env_vars.outputs.pkg_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
          registry-url: 'https://registry.npmjs.org'


      - name: Publish to NPM
        run: |
          cd ${{ steps.prep.outputs.pkg_dir }}
          npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  release-config:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: latest
          registry-url: 'https://registry.npmjs.org'

      - name: setup bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: install dependencies
        run: bun link && bun ci

      - name: release new version
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
